"""empty message

Revision ID: b74e6ca49130
Revises: 
Create Date: 2020-12-06 23:54:13.373189

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'b74e6ca49130'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('calculation_scheme',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.String(length=500), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('client_attracted_by',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.String(length=500), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('partner_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.String(length=500), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('payment_made_from_to',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.String(length=500), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_placements',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.String(length=500), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_provided_by',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.String(length=500), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_sell_by',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.String(length=500), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tariff_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.String(length=500), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('typical_process',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.String(length=500), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('business_model',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=500), nullable=True),
    sa.Column('tag', sa.String(length=500), nullable=True),
    sa.Column('client_attracted_by_id', sa.Integer(), nullable=False),
    sa.Column('product_sell_by_id', sa.Integer(), nullable=False),
    sa.Column('product_provided_by_id', sa.Integer(), nullable=False),
    sa.Column('payment_made_from_to_id', sa.Integer(), nullable=False),
    sa.Column('typical_process_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['client_attracted_by_id'], ['client_attracted_by.id'], ),
    sa.ForeignKeyConstraint(['payment_made_from_to_id'], ['payment_made_from_to.id'], ),
    sa.ForeignKeyConstraint(['product_provided_by_id'], ['product_provided_by.id'], ),
    sa.ForeignKeyConstraint(['product_sell_by_id'], ['product_sell_by.id'], ),
    sa.ForeignKeyConstraint(['typical_process_id'], ['typical_process.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('surveys',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('login', sa.String(length=100), nullable=True),
    sa.Column('product_name', sa.String(length=500), nullable=False),
    sa.Column('number_partners', sa.String(length=500), nullable=False),
    sa.Column('product_placement_id', sa.Integer(), nullable=False),
    sa.Column('client_attracted_by_id', sa.Integer(), nullable=False),
    sa.Column('product_sell_by_id', sa.Integer(), nullable=False),
    sa.Column('product_provided_by_id', sa.Integer(), nullable=False),
    sa.Column('payment_made_from_to_id', sa.Integer(), nullable=False),
    sa.Column('tariff_type_id', sa.Integer(), nullable=False),
    sa.Column('partner_type_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['client_attracted_by_id'], ['client_attracted_by.id'], ),
    sa.ForeignKeyConstraint(['partner_type_id'], ['partner_type.id'], ),
    sa.ForeignKeyConstraint(['payment_made_from_to_id'], ['payment_made_from_to.id'], ),
    sa.ForeignKeyConstraint(['product_placement_id'], ['product_placements.id'], ),
    sa.ForeignKeyConstraint(['product_provided_by_id'], ['product_provided_by.id'], ),
    sa.ForeignKeyConstraint(['product_sell_by_id'], ['product_sell_by.id'], ),
    sa.ForeignKeyConstraint(['tariff_type_id'], ['tariff_type.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###

    import sandbox.models as m

    product_placements = m.ProductPlacement.__table__
    op.bulk_insert(product_placements,
                   [{'id': 1,
                     'value': 'Собственная витрина'},
                    {'id': 2,
                     'value': 'На винтрине partners.mts.ru'},
                    {'id': 3,
                     'value': 'Неизвестно'}])

    client_attracted_by = m.ClientAttractedBy.__table__
    op.bulk_insert(client_attracted_by,
                   [{'id': 1,
                     'value': 'МТС'},
                    {'id': 2,
                     'value': 'Партнер'},
                    {'id': 3,
                     'value': 'МТС и Партнер'},
                    {'id': 4,
                     'value': 'Третья сторона отсутсвует'}
                    ])

    product_sell_by = m.ProductSellBy.__table__
    op.bulk_insert(product_sell_by,
                   [{'id': 1,
                     'value': 'МТС'},
                    {'id': 2,
                     'value': 'Партнер'},
                    {'id': 3,
                     'value': 'МТС и Партнер'}
                    ])

    product_provided_by = m.ProductProvidedBy.__table__
    op.bulk_insert(product_provided_by,
                   [{'id': 1,
                     'value': 'Продукт МТС'},
                    {'id': 2,
                     'value': 'Продукт Партнера'},
                    {'id': 3,
                     'value': 'Продукт и МТС и Партнера'}
                    ])

    payment_made_from_to = m.PaymentMadeFromTo.__table__
    op.bulk_insert(payment_made_from_to,
                   [{'id': 1,
                     'value': 'МТС Партнеру'},
                    {'id': 2,
                     'value': 'Партнер платит МТС'},
                    {'id': 3,
                     'value': 'Взаиморасчеты между Партнером и МТС происходят с двух сторон'}
                    ])

    tariff_type = m.TariffType.__table__
    op.bulk_insert(tariff_type,
                   [{'id': 1,
                     'value': 'Предоплата'},
                    {'id': 2,
                     'value': 'Постоплата'},
                    {'id': 3,
                     'value': 'Разовые платежи'}
                    ])

    partner_type = m.PartnerType.__table__
    op.bulk_insert(partner_type,
                   [{'id': 1,
                     'value': 'Самозанятый'},
                    {'id': 2,
                     'value': 'ИП'},
                    {'id': 3,
                     'value': 'ЮЛ'},
                    {'id': 4,
                     'value': 'Сотрудник МТС'},
                    {'id': 5,
                     'value': 'Не важно'}])

    typical_process = m.TypicalProcess.__table__
    op.bulk_insert(typical_process,
                   [{'id': 1,
                     'value': 'Типовая схема'},
                    {'id': 2,
                     'value': 'Схема на согласовании'}])

    calculation_scheme = m.СalculationScheme.__table__
    op.bulk_insert(calculation_scheme,
                   [{'id': 1,
                     'value': 'Revenue Sharing для каналов продаж'},
                    {'id': 2,
                     'value': 'Лидогенерация IN'},
                    {'id': 3,
                     'value': 'Продуктовый Revenue Sharing'},
                    {'id': 4,
                     'value': 'Продуктовый Fix/Продуктовый Роялти'},
                    {'id': 5,
                     'value': 'Смешанная'},
                    {'id': 6,
                     'value': 'Правообладатель'},
                    {'id': 7,
                     'value': 'Лидогенерация OUT'},
                    {'id': 8,
                     'value': 'Контракт является поставщиком'},
                    {'id': 9,
                     'value': 'Аренда IN'},
                    {'id': 10,
                     'value': 'Контракт является потребителем'},
                    {'id': 11,
                     'value': 'Аренда OUT'},
                    {'id': 12,
                     'value': 'Виртуальные операторы MVNO'},
                    {'id': 13,
                     'value': 'Интерконнект'},
                    {'id': 14,
                     'value': 'Финтех'}])
def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('surveys')
    op.drop_table('business_model')
    op.drop_table('typical_process')
    op.drop_table('tariff_type')
    op.drop_table('product_sell_by')
    op.drop_table('product_provided_by')
    op.drop_table('product_placements')
    op.drop_table('payment_made_from_to')
    op.drop_table('partner_type')
    op.drop_table('client_attracted_by')
    op.drop_table('calculation_scheme')
    # ### end Alembic commands ###
